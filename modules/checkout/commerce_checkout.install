<?php
/**
 * @file
 * Install, update and uninstall functions for the commerce_checkout module.
 *
 */


/**
 * Implements hook_schema().
 */
function commerce_checkout_schema() {
  $schema = array();

  $schema['commerce_checkout_pane'] = array(
    'description' => 'Checkout pane configuration data.',
    'fields' => array(
      'pane_id' => array(
        'description' => 'The machine readable name of the order state.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'page' => array(
        'description' => 'The ID of the checkout page on which this pane appears.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '1',
      ),
      'fieldset' => array(
        'description' => 'Boolean value indicating whether or not the pane should appear in a fieldset.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'collapsible' => array(
        'description' => 'Boolean value indicating whether or not the pane should appear collapsed.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'collapsed' => array(
        'description' => 'Boolean value indicating whether or not the pane should appear collapsed.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'description' => 'The sorting weight of the status for lists of statuses.',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
      'enabled' => array(
        'description' => 'Boolean value indicating whether or not the pane is enabled.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'review' => array(
        'description' => 'Boolean value indicating whether or not the pane should appear on the checkout review.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('pane_id'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function commerce_checkout_uninstall() {
  config_clear('commerce_checkout.settings', 'commerce_checkout_completion_message');
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_checkout_update_7100() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_checkout_update_7101() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_checkout_update_7102() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_checkout_update_7103(&$sandbox) { }

/**
 * Implements hook_update_last_removed().
 */
function commerce_checkout_update_last_removed() {
  return 7103;
}

/**
 * Implements hook_update_N().
 */
function commerce_checkout_update_1000() {
  $config = config('commerce_checkout.settings');
  $config->set('commerce_checkout_run_update_7103', update_variable_get('commerce_checkout_run_update_7103', 'FALSE'));
  $config->set('commerce_checkout_completion_message', update_variable_get('commerce_checkout_completion_message', 'dynamic value in file /commerce/modules/checkout/includes/commerce_checkout.checkout_pane.inc line 95'));
  $config->set('enable_commerce_checkout_order_created_date_update', update_variable_get('enable_commerce_checkout_order_created_date_update', 'FALSE'));
  update_variable_del('commerce_checkout_run_update_7103');
  update_variable_del('commerce_checkout_completion_message');
  update_variable_del('enable_commerce_checkout_order_created_date_update');
}

/**
 * Implements hook_install().
 */
function commerce_checkout_install() {
  // Dynamically generated variable data was detected.
  // /commerce/modules/checkout/includes/commerce_checkout.checkout_pane.inc line 95
}

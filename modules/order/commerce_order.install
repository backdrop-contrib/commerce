<?php
/**
 * @file
 * Install, update and uninstall functions for the commerce_order module.
 *
 */


/**
 * Implements hook_schema().
 */
function commerce_order_schema() {
  $schema = array();

  $schema['commerce_order'] = array(
    'description' => 'The base table for orders.',
    'fields' => array(
      'order_id' => array(
        'description' => 'The primary identifier for an order.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'order_number' => array(
        'description' => 'The order number displayed to the customer.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'revision_id' => array(
        'description' => 'The current {commerce_order_revision}.revision_id version identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'type' => array(
        'description' => 'The type of this order.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The {users}.uid that owns this order.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'mail' => array(
        'description' => 'The e-mail address associated with the order.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'The status name of this order.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the order was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the order was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'placed' => array(
        'description' => 'The Unix timestamp when the order was placed e.g. when checkout was completed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'hostname' => array(
        'description' => 'The IP address that created this order.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('order_id'),
    'unique keys' => array(
      'order_number' => array('order_number'),
      'revision_id' => array('revision_id'),
    ),
    'indexes' => array(
      'uid' => array('uid'),
    ),
    'foreign keys' => array(
      'current_revision' => array(
        'table' => 'commerce_order_revision',
        'columns' => array('revision_id' => 'revision_id'),
      ),
      'owner' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['commerce_order_revision'] = array(
    'description' => 'Saves information about each saved revision of a {commerce_order}.',
    'fields' => array(
      'order_id' => array(
        'description' => 'The {commerce_order}.order_id of the order this revision belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'order_number' => array(
        'description' => 'The order number displayed to the customer for this revision.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'revision_id' => array(
        'description' => 'The primary identifier for this revision.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'revision_uid' => array(
        'description' => 'The {users}.uid that owns the order at this revision.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'mail' => array(
        'description' => 'The e-mail address associated with the order at this revision.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'The status name of this revision.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'revision_timestamp' => array(
        'description' => 'The Unix timestamp when this revision was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'revision_hostname' => array(
        'description' => 'The IP address that created this order.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('revision_id'),
    'indexes' => array(
      'order_id' => array('order_id'),
    ),
    'foreign keys' => array(
      'order' => array(
        'table' => 'commerce_order',
        'columns' => array('order_id' => 'order_id'),
      ),
      'owner' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function commerce_order_uninstall() {
  // Delete any field instance attached to an order type.
  module_load_include('module', 'commerce');
  commerce_delete_instances('commerce_order');

  config_clear('commerce_order.settings', 'commerce_order_help_text');
}

/**
 * Between 7.x-1.0-beta2 and 7.x-1.0-beta3 we determined we needed to revise the
 * way we handled price amounts, preferring to preserve integer amounts as
 * loaded from the database until formatting them as decimal values upon display
 * instead of converting them to decimals upon loading. The initial reasons and
 * related issues are outlined in http://drupal.org/node/1124416.
 *
 * While the fix did not involve changing the database schema at all, it did
 * change the way price amounts were stored in the components array of a price's
 * data array. Therefore, the following update functions are responsible for
 * loading and resaving entities the change will affect, primarily to result in
 * a recalculated order total components array./
 */

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_order_update_7100(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_order_update_7101(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_order_update_7102(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_order_update_7103() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_order_update_7104() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_order_update_7105() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_order_update_7106() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_order_update_7107() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_order_update_7108() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_order_update_7109() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_order_update_7110() { }

/**
 * Implements hook_update_last_removed().
 */
function commerce_order_update_last_removed() {
  return 7110;
}

/**
 * Implements hook_update_N().
 */
function commerce_order_update_1000() {
  $config = config('commerce_order.settings');
  $config->set('commerce_order_auto_revision', update_variable_get('commerce_order_auto_revision', 'TRUE'));
  $config->set('commerce_order_help_text', update_variable_get('commerce_order_help_text', ''));
  $config->set('commerce_order_account_pane_mail_double_entry', update_variable_get('commerce_order_account_pane_mail_double_entry', 'FALSE'));
  $config->set('commerce_order_account_pane_auth_display', update_variable_get('commerce_order_account_pane_auth_display', 'FALSE'));
  update_variable_del('commerce_order_auto_revision');
  update_variable_del('commerce_order_help_text');
  update_variable_del('commerce_order_account_pane_mail_double_entry');
  update_variable_del('commerce_order_account_pane_auth_display');
}

/**
 * Implements hook_install().
 */
function commerce_order_install() {
  // Dynamically generated variable data was detected.
}
